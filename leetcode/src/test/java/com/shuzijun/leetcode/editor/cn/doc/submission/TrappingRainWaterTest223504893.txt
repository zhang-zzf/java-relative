    class Solution {

        public int trap(int[] height) {
            if (height.length < 3) {
                return 0;
            }
            int[] dpRight = new int[height.length];
            dpRight[height.length - 1] = 0;
            for (int i = height.length - 2; i >= 0; i--) {
                dpRight[i] = Math.max(height[i + 1], dpRight[i + 1]);
            }
            int[] dpLeft = new int[height.length];
            dpLeft[0] = 0;
            for (int i = 1; i < height.length; i++) {
                dpLeft[i] = Math.max(height[i - 1], dpLeft[i - 1]);
            }
            int sum = 0;
            for (int i = 0; i < height.length; i++) {
                sum += Math.max(0, Math.min(dpLeft[i], dpRight[i]) - height[i]);
            }
            return sum;
        }

    }

//runtime:1 ms
//memory:37.8 MB
